---
- name: Ensure that ufw_rule_parameters does not contain extra parameters 
  ansible.builtin.assert:
    that: >
      (ufw_rule_parameters | json_query('keys(@)') | difference(ufw_smart_rules_supported_parameters_attributes)) == []
    msg: "ufw_rule_parameters contains not allowed attributes: {{ (ufw_rule_parameters | json_query('keys(@)') | difference(ufw_smart_rules_supported_parameters_attributes)) }}"

- name: List existing UFW rules
  ansible.builtin.command: ufw status numbered
  register: ufw_status_numbered
  changed_when: false

- name: Retrieve ufw state and build query based on ufw_rule_matching_query_template
  ansible.builtin.set_fact:
    ufw_rules: "{{ ufw_status_numbered.stdout | community.general.jc('ufw') }}"
    matching_rules_query: "rules[?{{ lookup('ansible.builtin.template', './templates/query.j2') | trim | regex_replace('&&$', '') }}]"
    # also perform a transformation on the allowed ips to enable standard notation manipulation
    ufw_rule_from_ips_std: "{{ ufw_rule_from_ips | map('ansible.utils.ipaddr', 'network/prefix') }}"

- name: Display ufw state
  ansible.builtin.debug:
    msg: "{{ ufw_rules }}"
  when: ufw_smart_display_states | default(true)

- name: Display matching_rules_query (before filter match)
  ansible.builtin.debug:
    msg: "{{ matching_rules_query }}"
  when: ufw_smart_display_states | default(true)


- name: Match eligible ufw rules from current state 
  ansible.builtin.set_fact:
    matched_rules: "{{ ufw_rules | community.general.json_query(matching_rules_query)  }}"
    query_ordered_rules: "[*].{index: index, ip_std: join(`/`, [from_ip, to_string(from_ip_prefix)])} | sort_by(@, &index) | reverse(@)"
    query_ips_to_implement: "[*].join(`/`, [from_ip, to_string(from_ip_prefix)])"


- name: Display macthed rules
  ansible.builtin.debug:
    msg: "{{ matched_rules }}"
  when: ufw_smart_display_states | default(true)

- name: Compute target ufw rules transformations
  ansible.builtin.set_fact:
    # all the rules but with a std ip format (network/prefix) and ordered from greater index to smaller
    ordered_potential_delete_rules: "{{ 
      matched_rules | 
      community.general.json_query(query_ordered_rules)
      }}"
    # ips to implement but not listed in the current rules
    ips_to_implement: "{{
        ufw_rule_from_ips_std | difference(matched_rules | community.general.json_query(query_ips_to_implement))
      }}"

- name: Display all matched rules sorted (big index first to avoid conflicts)
  ansible.builtin.debug:
    msg: "{{ ordered_potential_delete_rules }}"
  when: ufw_smart_display_states | default(true)

- name: Display ips to implement
  ansible.builtin.debug:
    msg: "{{ ips_to_implement }}"
  when: ufw_smart_display_states | default(true)

- name: "UFW delete out of new definition rules"
  ansible.builtin.command: "ufw --force delete {{ item.index }}"
  when: item.ip_std not in ufw_rule_from_ips_std
  with_items: "{{ ordered_potential_delete_rules }}"

- name: "UFW add rules missing from the new definition"
  community.general.ufw:
    comment: "{{ ufw_rule_parameters.comment | default(omit) }}"
    direction: "{{ ufw_rule_parameters.direction | default(omit) }}"
    from_port: "{{ ufw_rule_parameters.from_port | default(omit) }}"
    interface: "{{ ufw_rule_parameters.interface | default(omit) }}"
    proto: "{{ ufw_rule_parameters.proto | default(omit) }}"
    route: "{{ ufw_rule_parameters.route | default(omit) }}"
    rule: "{{ ufw_rule_parameters.rule | default(omit) }}"
    to_ip: "{{ ufw_rule_parameters.to_ip | default(omit) }}"
    to_port: "{{ ufw_rule_parameters.to_port | default(omit) }}"
    from_ip: "{{ item }}"
  with_items: "{{ ips_to_implement }}"
...
